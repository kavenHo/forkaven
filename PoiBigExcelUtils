package com.sp.sptest;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.BuiltinFormats;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.logging.Logger;

/**
 * Created by DELL on 2018/10/15.
 */
public class PoiBigExcelUtils extends DefaultHandler {

    // 共享字符串表
    private SharedStringsTable sst;
    // 上一次的内容
    private String   lastContents;
    private boolean  nextIsString;
    private boolean  cellNull;

    private int sheetIndex = -1;
    private List<String> rowlist = new ArrayList<String>();
    // 当前行
    private int curRow = 0;
    // 当前列
    private int curCol     = 0;

    private int totalRow = 0;
    //用来控制解析多少行
    private int[] controlParseNum;
    //用来标识已经中断解析
    private boolean terminateParseFlag = false;
    //源表头
    private List<String> title = new ArrayList<String>();
    //源表数据
    private ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
    //源文件中缺少字段信息的无效数据信息记录
    private List<String> errorList = new ArrayList<String>();
    private String path;
    /**
     * 单元格数据类型，默认为字符串类型
     */
    private CellDataType nextDataType = CellDataType.SSTINDEX;
    private short formatIndex;

    private String formatString;
    /**
     * 单元格
     */
    private StylesTable stylesTable;
    private final DataFormatter formatter = new DataFormatter();

    public PoiBigExcelUtils() {
        super();
    }
    /**
    *path Excel文件全路径
    *args 需要读取的列的数组
    */
    public PoiBigExcelUtils(String path, int[] args) {
        super();
        this.path = path;
        this.controlParseNum = args;
    }

    /**
     * 只遍历一个电子表格，其中sheetId为要遍历的sheet索引，从1开始，1-3
     *
     * @param filename
     * @param sheetId
     * @throws Exception
     */
    /*public void processOneSheet(String filename, int sheetId) throws Exception {
        OPCPackage pkg = OPCPackage.open(filename);
        XSSFReader r = new XSSFReader(pkg);
        SharedStringsTable sst = r.getSharedStringsTable();
        XMLReader parser = fetchSheetParser(sst);

        // 根据 rId# 或 rSheet# 查找sheet
        InputStream sheet2 = r.getSheet("rId" + sheetId);
        sheetIndex++;
        InputSource sheetSource = new InputSource(sheet2);
        parser.parse(sheetSource);
        sheet2.close();
    }  */


    /**
     * 遍历工作簿中所有的电子表格

     *
     * @param
     * @throws Exception
     */
    public ArrayList<ArrayList<String>> process(){
        XMLReader parser = null;
        Iterator<InputStream> sheets = null;
        try {
            OPCPackage pkg = OPCPackage.open(path);
            XSSFReader r = new XSSFReader(pkg);
            stylesTable = r.getStylesTable();
            SharedStringsTable sst = r.getSharedStringsTable();

            parser = fetchSheetParser(sst);

            sheets = r.getSheetsData();
        } catch (InvalidFormatException e) {
            e.printStackTrace();
            System.out.println("process() InvalidFormat error");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("process() IO error");
        } catch (OpenXML4JException e) {
            e.printStackTrace();
            System.out.println("process() OpenXML4J error");
        }  catch (SAXException e) {
            e.printStackTrace();
            System.out.println("process() SAXException error");
        }
        if(sheets == null){
            return null;
        }
        while (sheets.hasNext()) {
            curRow = 0;
            sheetIndex++;
            InputStream sheet =  null;
            sheet = sheets.next();
            InputSource sheetSource = new InputSource(sheet);
            try {
                parser.parse(sheetSource);
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("process() IO error");
            } catch (SAXException e) {
                e.printStackTrace();
                System.out.println("process() SAX error");
            } finally {
                if(sheet != null){
                    try {
                        sheet.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                        System.out.println("process() InputStream close error");
                    }
                }
            }

        }
        Map<String, Object> mapR = new HashMap<String, Object>();
        mapR.put("result", result);
        mapR.put("title", title);
        mapR.put("total", totalRow - sheetIndex - 1);
        mapR.put("errorList", errorList);
        return result;
    }

    public XMLReader fetchSheetParser(SharedStringsTable sst) throws SAXException {
        XMLReader parser = XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser");
        this.sst = sst;
        parser.setContentHandler(this);
        return parser;
    }

    public void startElement(String uri, String localName, String name, Attributes attributes) throws SAXException {

        // c => 单元格
        if ("c".equals(name)) {
            // 如果下一个元素是 SST 的索引，则将nextIsString标记为true
            String cellType = attributes.getValue("t");
            this.setNextDataType(attributes);
            if ("s".equals(cellType)) {
                nextIsString = true;
                cellNull = false;
            }
            else {
                nextIsString = false;
                cellNull = true;
            }
        }

        // 置空
        lastContents = "";
    }

    public void endElement(String uri, String localName, String name) throws SAXException {

        // 根据SST的索引值的到单元格的真正要存储的字符串
        // 这时characters()方法可能会被调用多次
        if (nextIsString) {
            try {
                int idx = Integer.parseInt(lastContents);
                lastContents = new XSSFRichTextString(sst.getEntryAt(idx)).toString();
            } catch (Exception e) {
                //LOGGER.error("endElement() error", e);
            }
        }

        if ("v".equals(name) || "t".equals(name)) {
            String value = lastContents.trim();
            value = "".equals(value) ? " " : value;
            rowlist.add(curCol, value);
            curCol++;
            cellNull = false;
        }else if("c".equals(name) && cellNull == true){
            rowlist.add(curCol, "");
            curCol++;
            cellNull = false;
        }
        else {
            // 如果标签名称为 row ，这说明已到行尾，调用 optRows() 方法
            if ("row".equals(name)) {
                optRows(sheetIndex, curRow, rowlist);
                rowlist.clear();
                totalRow++;
                curRow++;
                curCol = 0;
            }
        }

    }

    /**
     * 单元格中的数据可能的数据类型
     */
    enum CellDataType {
        BOOL, ERROR, FORMULA, INLINESTR, SSTINDEX, NUMBER, DATE, NULL
    }

    /**
     * 处理数据类型
     *
     * @param attributes
     */
    public void setNextDataType(Attributes attributes) {
        nextDataType = CellDataType.NUMBER;
        formatIndex = -1;
        formatString = null;
        String cellType = attributes.getValue("t");
        String cellStyleStr = attributes.getValue("s");
        String columData = attributes.getValue("r");

        if ("b".equals(cellType)) {
            nextDataType = CellDataType.BOOL;
        } else if ("e".equals(cellType)) {
            nextDataType = CellDataType.ERROR;
        } else if ("inlineStr".equals(cellType)) {
            nextDataType = CellDataType.INLINESTR;
        } else if ("s".equals(cellType)) {
            nextDataType = CellDataType.SSTINDEX;
        } else if ("str".equals(cellType)) {
            nextDataType = CellDataType.FORMULA;
        }

        if (cellStyleStr != null) {
            int styleIndex = Integer.parseInt(cellStyleStr);
            XSSFCellStyle style = stylesTable.getStyleAt(styleIndex);
            formatIndex = style.getDataFormat();
            formatString = style.getDataFormatString();

            if ("m/d/yy" == formatString) {
                nextDataType = CellDataType.DATE;
                formatString = "yyyy-MM-dd hh:mm:ss.SSS";
            }

            if (formatString == null) {
                nextDataType = CellDataType.NULL;
                formatString = BuiltinFormats.getBuiltinFormat(formatIndex);
            }
        }
    }

    /**
     * 对解析出来的数据进行类型处理
     *
     * @param value
     *            单元格的值（这时候是一串数字）
     * @param thisStr
     *            一个空字符串
     * @return
     */
    @SuppressWarnings("deprecation")
    public String getDataValue(String value, String thisStr) {
        switch (nextDataType) {
            // 这几个的顺序不能随便交换，交换了很可能会导致数据错误
            case BOOL:
                char first = value.charAt(0);
                thisStr = first == '0' ? "FALSE" : "TRUE";
                break;
            case ERROR:
                thisStr = "\"ERROR:" + value.toString() + '"';
                break;
            case FORMULA:
                thisStr = '"' + value.toString() + '"';
                break;
            case INLINESTR:
                XSSFRichTextString rtsi = new XSSFRichTextString(value.toString());

                thisStr = rtsi.toString();
                rtsi = null;
                break;
            case SSTINDEX:
                String sstIndex = value.toString();
                try {
                    int idx = Integer.parseInt(sstIndex);
                    XSSFRichTextString rtss = new XSSFRichTextString(sst.getEntryAt(idx));
                    thisStr = rtss.toString();
                    rtss = null;
                } catch (NumberFormatException ex) {
                    thisStr = value.toString();
                }
                break;
            case NUMBER:
                if (formatString != null) {
                    thisStr = formatter.formatRawCellContents(Double.parseDouble(value), formatIndex, formatString).trim();
                } else {
                    thisStr = value;
                }

                thisStr = thisStr.replace("_", "").trim();
                break;
            case DATE:
                thisStr = formatter.formatRawCellContents(Double.parseDouble(value), formatIndex, formatString);

                // 对日期字符串作特殊处理
                thisStr = thisStr.replace(" ", "T");
                break;
            default:
                thisStr = " ";

                break;
        }

        return thisStr;
    }


    public void optRows(int sheetIndex, int curRow, List<String> rowList){
        ArrayList<String> curarr=new ArrayList<String>();
        if(!terminateParseFlag && controlParseNum.length > 0){
            for (int index : controlParseNum) {
                curarr.add(rowlist.get(index));
//                map.put(String.valueOf(controlParseNum[i]), rowlist.get(controlParseNum[i]));
            }
            result.add(curarr);
                /*if(totalRow - sheetIndex == controlParseNum){
                    terminateParseFlag = true;
                    try {
                        throw new SAXException();
                    } catch (SAXException e) {
                        LOGGER.info("读取前"+controlParseNum+"数据", e);
                    }
                }*/
        }
    }
    public void characters(char[] ch, int start, int length) throws SAXException {
        // 得到单元格内容的值

        lastContents += new String(ch, start, length);
    }
}
